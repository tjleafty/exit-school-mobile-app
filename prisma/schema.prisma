// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
  GUEST
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  VIDEO
  ARTICLE
}

enum VideoStatus {
  UPLOADING
  PROCESSING
  READY
  ERROR
}

model User {
  id             String       @id @default(cuid())
  email          String       @unique
  name           String?
  role           Role         @default(STUDENT)
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  enrollments    Enrollment[]
  progress       Progress[]
  auditLogs      AuditLog[]
  courses        Course[]     // Courses created by instructor/admin
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  domain    String?  @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id          String       @id @default(cuid())
  title       String
  description String
  thumbnail   String?
  status      CourseStatus @default(DRAFT)
  authorId    String
  author      User         @relation(fields: [authorId], references: [id])
  modules     Module[]
  enrollments Enrollment[]
  tags        String[]
  createdAt   DateTime     @default(now())
  publishedAt DateTime?
  updatedAt   DateTime     @updatedAt
}

model Module {
  id          String   @id @default(cuid())
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title       String
  description String?
  order       Int
  lessons     Lesson[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Lesson {
  id              String           @id @default(cuid())
  moduleId        String
  module          Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  title           String
  description     String?
  type            LessonType
  content         String?          // For articles (markdown/HTML)
  order           Int
  duration        Int?             // Duration in seconds
  videoAsset      VideoAsset?
  resources       ResourceFile[]
  progress        Progress[]
  releaseSchedule ReleaseSchedule?
  version         Int              @default(1)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model VideoAsset {
  id            String      @id @default(cuid())
  lessonId      String      @unique
  lesson        Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  muxAssetId    String?
  muxPlaybackId String?
  status        VideoStatus @default(UPLOADING)
  duration      Float?
  thumbnailUrl  String?
  captionsUrl   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model ResourceFile {
  id        String   @id @default(cuid())
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  fileName  String
  fileUrl   String
  fileSize  Int      // Size in bytes
  mimeType  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Enrollment {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  courseId       String
  course         Course   @relation(fields: [courseId], references: [id])
  enrollmentCode String?
  completedAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, courseId])
}

model Progress {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  lessonId       String
  lesson         Lesson   @relation(fields: [lessonId], references: [id])
  completed      Boolean  @default(false)
  percentWatched Int      @default(0)
  lastPosition   Float    @default(0) // Last position in seconds
  completedAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, lessonId])
}

model ReleaseSchedule {
  id          String   @id @default(cuid())
  lessonId    String   @unique
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  releaseDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  action     String
  entityType String
  entityId   String
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}