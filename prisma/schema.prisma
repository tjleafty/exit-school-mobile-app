// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
  GUEST
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum LessonType {
  VIDEO
  ARTICLE
}

enum VideoStatus {
  UPLOADING
  PROCESSING
  READY
  ERROR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum PermissionType {
  COURSE_CREATE
  COURSE_EDIT
  COURSE_DELETE
  COURSE_VIEW
  USER_CREATE
  USER_EDIT
  USER_DELETE
  USER_VIEW
  TOOL_ACCESS
  TOOL_RESULTS_VIEW
  ADMIN_PANEL_ACCESS
  SYSTEM_SETTINGS
}

model User {
  id             String              @id @default(cuid())
  email          String              @unique
  name           String?
  password       String?             // Hashed password
  role           Role                @default(STUDENT)
  status         UserStatus          @default(ACTIVE)
  isSuperUser    Boolean             @default(false) // Cannot be deleted
  organizationId String?
  organization   Organization?       @relation(fields: [organizationId], references: [id])
  enrollments    Enrollment[]
  progress       Progress[]
  auditLogs      AuditLog[]
  courses        Course[]            // Courses created by instructor/admin
  permissions    UserPermission[]    // Individual user permissions
  courseAccess   UserCourseAccess[]  @relation("UserCourseAccess")
  toolAccess     UserToolAccess[]    @relation("UserToolAccess")
  lastLoginAt    DateTime?
  isActive       Boolean             @default(true)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  domain    String?  @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id          String             @id @default(cuid())
  title       String
  description String
  thumbnail   String?
  status      CourseStatus       @default(DRAFT)
  authorId    String
  author      User               @relation(fields: [authorId], references: [id])
  modules     Module[]
  enrollments Enrollment[]
  userAccess  UserCourseAccess[] @relation("CourseUserAccess")
  tags        String // JSON string for SQLite compatibility
  createdAt   DateTime           @default(now())
  publishedAt DateTime?
  updatedAt   DateTime           @updatedAt
}

model Module {
  id          String   @id @default(cuid())
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title       String
  description String?
  order       Int
  lessons     Lesson[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Lesson {
  id              String           @id @default(cuid())
  moduleId        String
  module          Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  title           String
  description     String?
  type            LessonType
  content         String?          // For articles (markdown/HTML)
  order           Int
  duration        Int?             // Duration in seconds
  videoAsset      VideoAsset?
  resources       ResourceFile[]
  progress        Progress[]
  releaseSchedule ReleaseSchedule?
  version         Int              @default(1)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model VideoAsset {
  id            String      @id @default(cuid())
  lessonId      String      @unique
  lesson        Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  muxAssetId    String?
  muxPlaybackId String?
  status        VideoStatus @default(UPLOADING)
  duration      Float?
  thumbnailUrl  String?
  captionsUrl   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model ResourceFile {
  id        String   @id @default(cuid())
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  fileName  String
  fileUrl   String
  fileSize  Int      // Size in bytes
  mimeType  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Enrollment {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  courseId       String
  course         Course   @relation(fields: [courseId], references: [id])
  enrollmentCode String?
  completedAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, courseId])
}

model Progress {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  lessonId       String
  lesson         Lesson   @relation(fields: [lessonId], references: [id])
  completed      Boolean  @default(false)
  percentWatched Int      @default(0)
  lastPosition   Float    @default(0) // Last position in seconds
  completedAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, lessonId])
}

model ReleaseSchedule {
  id          String   @id @default(cuid())
  lessonId    String   @unique
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  releaseDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  action     String
  entityType String
  entityId   String
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id          String           @id @default(cuid())
  name        PermissionType
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  userPermissions UserPermission[]
  rolePermissions RolePermission[]
  
  @@unique([name])
}

model UserPermission {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  granted      Boolean    @default(true)
  grantedBy    String?    // User ID who granted this permission
  grantedAt    DateTime   @default(now())
  expiresAt    DateTime?  // Optional expiration
  
  @@unique([userId, permissionId])
}

model RolePermission {
  id           String     @id @default(cuid())
  role         Role
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  
  @@unique([role, permissionId])
}

model UserCourseAccess {
  id       String  @id @default(cuid())
  userId   String
  user     User    @relation("UserCourseAccess", fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course  @relation("CourseUserAccess", fields: [courseId], references: [id], onDelete: Cascade)
  canView  Boolean @default(true)
  canEdit  Boolean @default(false)
  grantedBy String?
  grantedAt DateTime @default(now())
  
  @@unique([userId, courseId])
}

model UserToolAccess {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation("UserToolAccess", fields: [userId], references: [id], onDelete: Cascade)
  toolName   String   // Name of the tool (e.g., "calculator", "editor")
  canAccess  Boolean  @default(true)
  grantedBy  String?
  grantedAt  DateTime @default(now())
  expiresAt  DateTime?
  
  @@unique([userId, toolName])
}